/*! (c) Andrea Giammarchi - ISC */
function e(e){return"string"==typeof e?/^proxied-worker:cb:\d+$/.test(e)?(t.has(e)||t.set(e,((...t)=>{this.postMessage({id:e,args:t})})),t.get(e)):e.slice(1):e}const t=new Map;let s=0;export default function(t){const n=new WeakMap;async function i(t,i,a){for(let r=0,{length:o}=a;r<o;r++)if(a[r].endsWith(".new")){const o=new(i[a[r].slice(0,-".new".length)])(...a[++r].map(e,t));n.get(this).set(i=String(s++),o)}else i=a[r].endsWith(".apply")?await i[a[r].slice(0,-".apply".length)](...a[++r].map(e,t)):await i[a[r]];return i}async function a(e){const{source:s,data:{id:a,list:r}}=e;if(!/^proxied-worker:([^:]*?):-?\d+$/.test(a))return;const o=RegExp.$1,c=s||this;let l,d;if(n.has(this)||n.set(this,new Map),o.length){const e=n.get(this);if(!r.length)return void e.delete(o);try{l=await i.call(this,c,e.get(o),r)}catch({message:e}){d=e}}else try{l=await i.call(this,c,t,r)}catch({message:e}){d=e}c.postMessage({id:a,result:l,error:d})}addEventListener("connect",(({ports:e=[]})=>{for(const t of e)t.addEventListener("message",a.bind(t)),t.start()})),addEventListener("message",a.bind(globalThis))};
