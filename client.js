/*! (c) Andrea Giammarchi - ISC */
const{navigator:e,ServiceWorker:t,SharedWorker:n,Worker:r}=globalThis;let s=0;const i=n=>n instanceof t?e.serviceWorker:n,o=(e,t,n,r=(e=>e))=>new Promise(((o,a)=>{let c=`proxied-worker:${t}:${s++}`;const l=i(e);l.addEventListener("message",(function e({data:{id:t,result:n,error:s}}){t===c&&(l.removeEventListener("message",e),null!=s?a(new Error(s)):o(r(n)))})),e.postMessage({id:c,list:n})}));function a(s,a={type:"classic"},l=r){const d=(e,t)=>new Proxy(c.bind({id:e,list:t}),g),h=new FinalizationRegistry((e=>{u.then((t=>t.postMessage({id:`proxied-worker:${e}:-0`,list:[]})))})),u=new Promise((r=>{if(l===n){const{port:e}=new l(s,a);e.start(),r(e)}else l===t?e.serviceWorker.register(s,a).then((({installing:e,waiting:t,active:n})=>r(e||t||n))):r(new l(s,a))})),g={apply(e,t,n){const{id:r,list:s}=e();return s[s.length-1]+=".apply",s.push(n),u.then((e=>o(e,r,s)))},construct(e,t){const{id:n,list:r}=e();return r[r.length-1]+=".new",r.push(t),u.then((e=>o(e,n,r,(e=>{const t=d(e,[]);return h.register(t,e),t}))))},get(e,t){const{id:n,list:r}=e(),{length:s}=r;switch(t){case"then":return s?(e,t)=>u.then((s=>o(s,n,r).then(e,t))):void 0;case"addEventListener":case"removeEventListener":if(!s&&!n)return(...e)=>u.then((n=>{i(n)[t](...e)}))}return d(n,r.concat(t))}};return d("",[])}function c(){return this}export default a;
