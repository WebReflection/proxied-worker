/*! (c) Andrea Giammarchi - ISC */
let t=0;const e=(e,r,n,s=(t=>t))=>new Promise(((i,o)=>{let l=`proxied-worker:${r}:${t++}`;e.addEventListener("message",(function t({data:{id:r,result:n,error:c}}){r===l&&(e.removeEventListener("message",t),null!=c?o(new Error(c)):i(s(n)))})),e.postMessage({id:l,list:n})}));function r(t,r={type:"classic"},s=globalThis.Worker){const i=(t,e)=>new Proxy(n.bind({id:t,list:e}),a),o=new FinalizationRegistry((t=>{c.postMessage({id:`proxied-worker:${t}:-0`,list:[]})})),l=new s(t,r),c=l.port||l;c!==l&&c.start();const a={apply(t,r,n){const{id:s,list:i}=t();return i[i.length-1]+=".apply",i.push(n),e(c,s,i)},construct(t,r){const{id:n,list:s}=t();return s[s.length-1]+=".new",s.push(r),e(c,n,s,(t=>{const e=i(t,[]);return o.register(e,t),e}))},get(t,r){const{id:n,list:s}=t();switch(r){case"toJSON":return()=>({id:n,list:s});case"then":return s.length?(t,r)=>e(c,n,s).then(t,r):void 0}return i(n,s.concat(r))}};return i("",[])}function n(){return this}export default r;
