/*! (c) Andrea Giammarchi - ISC */
let e=0;const t=(t,r,n,s=(e=>e))=>new Promise(((i,o)=>{let l=`proxied-worker:${r}:${e++}`;t.addEventListener("message",(function e({data:{id:r,result:n,error:a}}){r===l&&(t.removeEventListener("message",e),null!=a?o(new Error(a)):i(s(n)))})),t.postMessage({id:l,list:n})}));function r(e,r={type:"classic"},s=globalThis.Worker){const i=(e,t)=>new Proxy(n.bind({id:e,list:t}),a),o=new FinalizationRegistry((e=>{l.then((t=>t.postMessage({id:`proxied-worker:${e}:-0`,list:[]})))})),l=new Promise((t=>{if(s===globalThis.SharedWorker){const{port:n}=new s(e,r);n.start(),t(n)}else s===globalThis.ServiceWorker?navigator.serviceWorker.register(e,r).then((({installing:e,waiting:r,active:n})=>t(e||r||n))):t(new s(e,r))})),a={apply(e,r,n){const{id:s,list:i}=e();return i[i.length-1]+=".apply",i.push(n),l.then((e=>t(e,s,i)))},construct(e,r){const{id:n,list:s}=e();return s[s.length-1]+=".new",s.push(r),l.then((e=>t(e,n,s,(e=>{const t=i(e,[]);return o.register(t,e),t}))))},get(e,r){const{id:n,list:s}=e();switch(r){case"toJSON":return()=>({id:n,list:s});case"then":return s.length?(e,r)=>l.then((i=>t(i,n,s).then(e,r))):void 0}return i(n,s.concat(r))}};return i("",[])}function n(){return this}export default r;
