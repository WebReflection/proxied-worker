/*! (c) Andrea Giammarchi - ISC */
const{navigator:e,ServiceWorker:t,SharedWorker:r,Worker:n}=globalThis;let s=0;const i=(r,n,i,o=(e=>e))=>new Promise(((c,a)=>{let l=`proxied-worker:${n}:${s++}`;const d=r instanceof t?e.serviceWorker:r;d.addEventListener("message",(function e({data:{id:t,result:r,error:n}}){t===l&&(d.removeEventListener("message",e),null!=n?a(new Error(n)):c(o(r)))})),r.postMessage({id:l,list:i})}));function o(s,o={type:"classic"},a=n){const l=(e,t)=>new Proxy(c.bind({id:e,list:t}),h),d=new FinalizationRegistry((e=>{u.then((t=>t.postMessage({id:`proxied-worker:${e}:-0`,list:[]})))})),u=new Promise((n=>{if(a===r){const{port:e}=new a(s,o);e.start(),n(e)}else a===t?e.serviceWorker.register(s,o).then((({installing:e,waiting:t,active:r})=>n(e||t||r))):n(new a(s,o))})),h={apply(e,t,r){const{id:n,list:s}=e();return s[s.length-1]+=".apply",s.push(r),u.then((e=>i(e,n,s)))},construct(e,t){const{id:r,list:n}=e();return n[n.length-1]+=".new",n.push(t),u.then((e=>i(e,r,n,(e=>{const t=l(e,[]);return d.register(t,e),t}))))},get(e,t){const{id:r,list:n}=e();switch(t){case"toJSON":return()=>({id:r,list:n});case"then":return n.length?(e,t)=>u.then((s=>i(s,r,n).then(e,t))):void 0}return l(r,n.concat(t))}};return l("",[])}function c(){return this}export default o;
