/*! (c) Andrea Giammarchi - ISC */
let e=0;const t=(t,n,r,s=(e=>e))=>new Promise(((i,o)=>{let l=`proxied-worker:${n}:${e++}`;t.addEventListener("message",(function e({data:{id:n,result:r,error:c}}){n===l&&(t.removeEventListener("message",e),null!=c?o(new Error(c)):i(s(r)))})),t.postMessage({id:l,list:r})}));function n(e,n={type:"classic"},s=globalThis.Worker){const i=(e,t)=>new Proxy(r.bind({id:e,list:t}),c),o=new FinalizationRegistry((e=>{l.postMessage({id:`proxied-worker:${e}:-0`,list:[]})})),l=new s(e,n),c={apply(e,n,r){const{id:s,list:i}=e();return i[i.length-1]+=".apply",i.push(r),t(l,s,i)},construct(e,n){const{id:r,list:s}=e();return s[s.length-1]+=".new",s.push(n),t(l,r,s,(e=>{const t=i(e,[]);return o.register(t,e),t}))},get(e,n){const{id:r,list:s}=e();switch(n){case"toJSON":return()=>({id:r,list:s});case"then":return s.length?(e,n)=>t(l,r,s).then(e,n):void 0}return i(r,s.concat(n))}};return i("",[])}function r(){return this}export default n;
