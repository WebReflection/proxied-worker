/*! (c) Andrea Giammarchi - ISC */
const{navigator:e,ServiceWorker:t,SharedWorker:r,Worker:n}=globalThis,{isArray:s}=Array,i=[e=>e],o=({data:{id:e,args:t}})=>{s(t)&&/^proxied-worker:cb:(\d+)$/.test(e)&&i[RegExp.$1](...t)},a=r=>r instanceof t?e.serviceWorker:r;let c=0;const l=(e,t,r,n=null,l=i[0])=>new Promise(((d,g)=>{let h=`proxied-worker:${t}:${c++}`;const u=a(e);if(u.addEventListener("message",(function e({data:{id:t,result:r,error:n}}){t===h&&(u.removeEventListener("message",e),null!=n?g(new Error(n)):d(l(r)))})),s(n)){r.push(n);for(let e=0,{length:t}=n;e<t;e++)switch(typeof n[e]){case"string":n[e]="$"+n[e];break;case"function":u.addEventListener("message",o);let t=i.indexOf(n[e]);t<0&&(t=i.push(n[e])-1),n[e]=`proxied-worker:cb:${t}`}}e.postMessage({id:h,list:r})}));function d(s,i={type:"classic"},o=n){const c=(e,t)=>new Proxy(g.bind({id:e,list:t}),u),d=new FinalizationRegistry((e=>{h.then((t=>t.postMessage({id:`proxied-worker:${e}:-0`,list:[]})))})),h=new Promise((n=>{if(o===r){const{port:e}=new o(s,i);e.start(),n(e)}else o===t?e.serviceWorker.register(s,i).then((({installing:e,waiting:t,active:r})=>n(e||t||r))):n(new o(s,i))})),u={apply(e,t,r){const{id:n,list:s}=e();return s[s.length-1]+=".apply",h.then((e=>l(e,n,s,r)))},construct(e,t){const{id:r,list:n}=e();return n[n.length-1]+=".new",h.then((e=>l(e,r,n,t,(e=>{const t=c(e,[]);return d.register(t,e),t}))))},get(e,t){const{id:r,list:n}=e(),{length:s}=n;switch(t){case"then":return s?(e,t)=>h.then((s=>l(s,r,n).then(e,t))):void 0;case"addEventListener":case"removeEventListener":if(!s&&!r)return(...e)=>h.then((r=>{a(r)[t](...e)}))}return c(r,n.concat(t))}};return c("",[])}function g(){return this}export default d;
